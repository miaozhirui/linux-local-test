{"version":3,"sources":["webpack:///webpack/bootstrap 9c1c8c46cb048f8352b7","webpack:///./src/1.js","webpack:///./src/modules/class.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;ACrCC,wB;;;;;;;;;;ACDD,QAAO,MAAP;AACA,QAAO,IAAP;AACA,QAAO,mBAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgFM,SACL,SADK,MACL,GAAc;;;wBADT,QACS;EAAd;;AAID,KAAI,UAAU,IAAI,MAAJ,EAAV,C","file":"1.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9c1c8c46cb048f8352b7\n **/"," // es6里面的类\n import './modules/class';\n\n\n // 函数的扩展\n// import './modules/function';\n\n// 1.函数参数的默认值\n //1. let var \n // {\n // \tlet a = 1;\n // \tvar b = 2;\n // }\n // console.log(a,b)\n\n // 2.for循环的计数器\n // for(let i = 0; i<10; i++){\n // \tconsole.log(i)\n // }\n // console.log(i)\n\n // var a = [];  \n // for(let i=0; i<10; i++){\n // \ta[i] = function(){\n // \t\tconsole.log(i)\n // \t}\n // }  \n // a[6]()  \n\n // 3.不存在变量提升\n // console.log(foo);\n // let foo =2;\n // import * as person from './modules/1';\n // // import {say} from './modules/2';   \n // import action from './modules/2';  \n // console.log(action())  \n // console.log(person.firstName, person.lastName, person.year)   \n\n // 4.模块的整体加载 \n // 5.export default命令 \n\n // import {firstName, lastName, year} from './modules/1';\n // import say from './modules/2'; \n\n // say()\n // console.log(firstName, lastName, year);\n //  console.log()\n // import {firstName, lastName} from './modules/export';\n\n // console.log(firstName, lastName)\n \n\n // import React ,{ActivityIndicatorIOS, ActivityIndicator} from './modules/export';\n \n // console.log(React)\n // console.log(ActivityIndicator)\n // console.log(ActivityIndicatorIOS)\n// import * as action from './modules/export';\n// console.log(action.add(), action.del());\n\n// import de, {del, add} from \"./modules/export\";\n\n// de();\n// del();\n// add();\n\n\n// 6.let和const\n// import \"./modules/let_and_const\";\n\n// 7.函数的扩展\n// import './modules/arrow';\n\n// 8.对象的扩展\n// import './modules/object';\n\n// 9.Symbol\n\t// import './modules/Symbol';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/1.js\n **/","Object.assign//给对象添加方法\nObject.keys//枚举对象里面的key,如果在类里面定义方法的话，是无法枚举出类原型上面的方法的\nObject.getOwnPropertyNames//获取对象上面的key值\n\n// 传统js定义类=============\n// function Peron (name, age){\n// \tthis.name = name;\n// \tthis.age = age\n// }\n\n// Peron.prototype.toString = function(){\n\n// \treturn '(' + this.name + ',' + this.age + ')';\n// }\n\n// var girl = new Peron('miaozhirui', 19);\n// console.log(girl);\n// es6定义类的方式============\n// class Person{\n\n// \tconstructor(name, age) {\n// \t\tthis.name = name;\n// \t\tthis.age = age;\n// \t\tconsole.log('constructor')\n// \t}\n\n// \tsayName() {\n// \t\tconsole.log(this.name)\n// \t\tconsole.log('sayName');\n// \t}\n\n// \t// sayAge() {\n// \t// \tconsole.log(this.age);\n// \t// }\n// }\n\n\n// var person1 = new Person('miaozhirui', 18);\n// console.log(person1);\n// person1.sayName()\n//Object.asign===========用来想对象中添加多个方法\n// var obj = {};\n// Object.assign(obj, {\n// \tsayName() { console.log('say name'); },\n// \tsayAge() { console.log('say age'); }\n// })\n// console.log(obj)\n\n//==================向类上面添加方法\n// person1.sayName()\n// Object.assign(Person.prototype, {\n// \tsayName() {console.log('sayname');},\n// \tsayAge() {console.log('sayAge');}\n// })\n\n// person1.sayName();\n// console.log(Person.prototype.constructor === Person);\n\n//===================类中定义的方法都是不可以枚举的\n// var keys = Object.keys(Person.prototype);\n// var keys = Object.getOwnPropertyNames(Person.prototype);\n// keys.forEach(fun=>console.log(fun));\n// console.log(keys)\n\n//===================类的属性名可以是表达式\n// let methodName = 'miaozhirui';\n// class Person{\n// \tconstructor(name, age) {\n// \t\tthis.name = name;\n// \t\tthis.age = age;\n// \t}\n// \t[methodName]() {\n// \t\tconsole.log('methodName');\n// \t}\n// }\n// const person1 = new Person('miaozhirui', 90);\n// console.log(person1);\n// person1.miaozhirui();\n\n//====================constructor的方法\n\n//类的实例对象\nclass Person{\n\tconstructor() {\n\t\t// console.log(11)\n\t}\n}\nvar person1 = new Person();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/modules/class.js\n **/"],"sourceRoot":""}