'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _asyncReplace = require('async-replace');

var _asyncReplace2 = _interopRequireDefault(_asyncReplace);

var _svgo = require('svgo');

var _svgo2 = _interopRequireDefault(_svgo);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _isSvg = require('is-svg');

var _isSvg2 = _interopRequireDefault(_isSvg);

var dataURI = /data:image\/svg\+xml(;(charset=)?utf-8)?,/;
var encode = encodeURIComponent;
var decode = decodeURIComponent;

function minifyPromise(svgo, decl) {
    return new Promise(function (resolve, reject) {
        var isUriEncoded = decode(decl.value) !== decl.value;
        var minify = function minify(_, quote, svg, offset, str, cb) {
            if (!dataURI.test(svg) || !(0, _isSvg2['default'])(svg)) {
                return cb(null, str);
            }
            if (typeof quote === 'undefined') {
                quote = '';
            }
            svgo.optimize(svg.replace(dataURI, ''), function (result) {
                if (result.error) {
                    return reject('Error parsing SVG: ' + result.error);
                }
                var data = isUriEncoded ? encode(result.data) : result.data;
                var o = 'url(' + quote + 'data:image/svg+xml;utf-8,' + data + quote + ')';
                return cb(null, o);
            });
        };
        (0, _asyncReplace2['default'])(isUriEncoded ? decode(decl.value) : decl.value, /url\(("|')?(.*)\1\)/g, minify, function (err, result) {
            decl.value = result;
            resolve();
        });
    });
}

module.exports = _postcss2['default'].plugin('postcss-svgo', function (opts) {
    var svgo = new _svgo2['default'](opts);
    return function (css) {
        return new Promise(function (resolve, reject) {
            var promises = [];
            css.walkDecls(function (decl) {
                if (dataURI.test(decl.value)) {
                    promises.push(minifyPromise(svgo, decl));
                }
            });
            Promise.all(promises).then(resolve, reject);
        });
    };
});